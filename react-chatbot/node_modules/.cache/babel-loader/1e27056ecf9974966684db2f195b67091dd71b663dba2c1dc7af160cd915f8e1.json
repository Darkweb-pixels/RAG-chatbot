{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zexa\\\\Downloads\\\\Rag_Chatbot-main\\\\Rag_Chatbot-main\\\\rag\\\\react-chatbot\\\\src\\\\components\\\\ChatWidget.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './ChatWidget.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatWidget = ({\n  apiKey\n}) => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: 'welcome-msg',\n    content: \"How can I help you today?\",\n    sender: 'bot',\n    timestamp: new Date(),\n    read: true\n  }]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(true);\n  const [isTyping, setIsTyping] = useState(false);\n  const [lastTypingTime, setLastTypingTime] = useState(null);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n\n  // Auto-scroll to bottom of messages\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n\n    // Mark all bot messages as read when user views them\n    if (isOpen) {\n      setMessages(prevMessages => prevMessages.map(msg => msg.sender === 'bot' && !msg.read ? {\n        ...msg,\n        read: true\n      } : msg));\n    }\n  }, [messages, isOpen]);\n\n  // Focus input when chat opens\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isOpen]);\n\n  // Typing indicator timeout\n  useEffect(() => {\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n    if (isTyping) {\n      typingTimeoutRef.current = setTimeout(() => {\n        setIsTyping(false);\n      }, 2000);\n    }\n    return () => {\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n    };\n  }, [isTyping]);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n\n    // Detect user typing for real-time feedback\n    const currentTime = new Date().getTime();\n\n    // Only show typing indicator if user hasn't typed for 500ms\n    if (!isTyping || lastTypingTime && currentTime - lastTypingTime > 500) {\n      setIsTyping(true);\n      setLastTypingTime(currentTime);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const messageId = `user-${Date.now()}`;\n    const currentTime = new Date();\n    const userMessage = {\n      id: messageId,\n      content: input,\n      sender: 'user',\n      timestamp: currentTime,\n      read: true\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n    setIsTyping(false);\n    try {\n      // Send message to backend\n      const response = await axios.post('/chat', {\n        message: input,\n        api_key: apiKey\n      });\n\n      // Add small random delay to make it feel more natural (300-1200ms)\n      const replyDelay = 300 + Math.random() * 900;\n\n      // Simulate \"typing\" delay based on response length\n      const typingDuration = Math.min(1000 + response.data.response.length / 10 * 100, 3000);\n\n      // Show typing indicator for a realistic duration\n      await new Promise(resolve => setTimeout(resolve, replyDuration = typingDuration));\n      const botMessage = {\n        id: `bot-${Date.now()}`,\n        content: response.data.response,\n        sender: 'bot',\n        timestamp: new Date(),\n        read: isOpen // Only mark as read if chat is open\n      };\n      setMessages(prev => [...prev, botMessage]);\n\n      // If widget is closed when response arrives, show notification\n      if (!isOpen) {\n        showNotification(\"New message from AI Assistant\");\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error sending message:', error);\n      const errorMessage = {\n        id: `error-${Date.now()}`,\n        content: `Sorry, there was an error: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message || 'Unknown error'}`,\n        sender: 'bot',\n        timestamp: new Date(),\n        read: isOpen,\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const toggleWidget = () => {\n    setIsOpen(!isOpen);\n\n    // If opening the widget, mark all messages as read\n    if (!isOpen) {\n      setMessages(prevMessages => prevMessages.map(msg => msg.sender === 'bot' && !msg.read ? {\n        ...msg,\n        read: true\n      } : msg));\n    }\n  };\n  const showNotification = message => {\n    // Show browser notification if supported\n    if (\"Notification\" in window) {\n      if (Notification.permission === \"granted\") {\n        new Notification(message);\n      } else if (Notification.permission !== \"denied\") {\n        Notification.requestPermission().then(permission => {\n          if (permission === \"granted\") {\n            new Notification(message);\n          }\n        });\n      }\n    }\n  };\n\n  // Count unread messages\n  const unreadCount = messages.filter(msg => msg.sender === 'bot' && !msg.read).length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-widget ${isOpen ? 'open' : 'closed'}`,\n    children: [isOpen ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-widget-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Chat with AI Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-widget-messages\",\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-widget-message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `chat-widget-message-content ${message.isError ? 'error-message' : ''}`,\n            children: [message.content, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-timestamp\",\n              children: formatTime(message.timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 19\n            }, this), message.sender === 'user' && message.read && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"read-receipt\",\n              children: \"\\u2713\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 17\n          }, this)\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-typing-indicator\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"You are typing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 15\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-widget-message bot-message\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"chat-widget-input\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: inputRef,\n          type: \"text\",\n          value: input,\n          onChange: handleInputChange,\n          placeholder: \"Type your message...\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading || !input.trim(),\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            viewBox: \"0 0 24 24\",\n            fill: \"none\",\n            xmlns: \"http://www.w3.org/2000/svg\",\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M22 2L11 13\",\n              stroke: \"currentColor\",\n              strokeWidth: \"2\",\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M22 2L15 22L11 13L2 9L22 2Z\",\n              stroke: \"currentColor\",\n              strokeWidth: \"2\",\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-widget-button\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unread-badge\",\n        children: unreadCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chat-widget-toggle\",\n      onClick: toggleWidget,\n      children: isOpen ? /*#__PURE__*/_jsxDEV(\"svg\", {\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M18 6L6 18\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M6 6L18 18\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M20 11H4C3.45 11 3 11.45 3 12C3 12.55 3.45 13 4 13H20C20.55 13 21 12.55 21 12C21 11.45 20.55 11 20 11Z\",\n          fill: \"currentColor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to format time for messages\n_s(ChatWidget, \"mNSnyxjr5dOmfBIrNhO3usHD0lA=\");\n_c = ChatWidget;\nconst formatTime = date => {\n  if (!date) return '';\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n};\nexport default ChatWidget;\nvar _c;\n$RefreshReg$(_c, \"ChatWidget\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatWidget","apiKey","_s","messages","setMessages","id","content","sender","timestamp","Date","read","input","setInput","isLoading","setIsLoading","isOpen","setIsOpen","isTyping","setIsTyping","lastTypingTime","setLastTypingTime","messagesEndRef","inputRef","typingTimeoutRef","_messagesEndRef$curre","current","scrollIntoView","behavior","prevMessages","map","msg","focus","clearTimeout","setTimeout","handleInputChange","e","target","value","currentTime","getTime","handleSubmit","preventDefault","trim","messageId","now","userMessage","prev","response","post","message","api_key","replyDelay","Math","random","typingDuration","min","data","length","Promise","resolve","replyDuration","botMessage","showNotification","error","_error$response","_error$response$data","console","errorMessage","detail","isError","toggleWidget","window","Notification","permission","requestPermission","then","unreadCount","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","formatTime","ref","onSubmit","type","onChange","placeholder","disabled","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","onClick","_c","date","hours","getHours","minutes","getMinutes","toString","padStart","$RefreshReg$"],"sources":["C:/Users/Zexa/Downloads/Rag_Chatbot-main/Rag_Chatbot-main/rag/react-chatbot/src/components/ChatWidget.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport './ChatWidget.css';\r\n\r\nconst ChatWidget = ({ apiKey }) => {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      id: 'welcome-msg',\r\n      content: \"How can I help you today?\",\r\n      sender: 'bot',\r\n      timestamp: new Date(),\r\n      read: true\r\n    }\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [lastTypingTime, setLastTypingTime] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n  const typingTimeoutRef = useRef(null);\r\n\r\n  // Auto-scroll to bottom of messages\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    \r\n    // Mark all bot messages as read when user views them\r\n    if (isOpen) {\r\n      setMessages(prevMessages => prevMessages.map(msg => \r\n        msg.sender === 'bot' && !msg.read ? {...msg, read: true} : msg\r\n      ));\r\n    }\r\n  }, [messages, isOpen]);\r\n\r\n  // Focus input when chat opens\r\n  useEffect(() => {\r\n    if (isOpen && inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isOpen]);\r\n\r\n  // Typing indicator timeout\r\n  useEffect(() => {\r\n    if (typingTimeoutRef.current) {\r\n      clearTimeout(typingTimeoutRef.current);\r\n    }\r\n    \r\n    if (isTyping) {\r\n      typingTimeoutRef.current = setTimeout(() => {\r\n        setIsTyping(false);\r\n      }, 2000);\r\n    }\r\n    \r\n    return () => {\r\n      if (typingTimeoutRef.current) {\r\n        clearTimeout(typingTimeoutRef.current);\r\n      }\r\n    };\r\n  }, [isTyping]);\r\n\r\n  const handleInputChange = (e) => {\r\n    setInput(e.target.value);\r\n    \r\n    // Detect user typing for real-time feedback\r\n    const currentTime = new Date().getTime();\r\n    \r\n    // Only show typing indicator if user hasn't typed for 500ms\r\n    if (!isTyping || (lastTypingTime && currentTime - lastTypingTime > 500)) {\r\n      setIsTyping(true);\r\n      setLastTypingTime(currentTime);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!input.trim()) return;\r\n    \r\n    const messageId = `user-${Date.now()}`;\r\n    const currentTime = new Date();\r\n    \r\n    const userMessage = {\r\n      id: messageId,\r\n      content: input,\r\n      sender: 'user',\r\n      timestamp: currentTime,\r\n      read: true\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInput('');\r\n    setIsLoading(true);\r\n    setIsTyping(false);\r\n    \r\n    try {\r\n      // Send message to backend\r\n      const response = await axios.post('/chat', {\r\n        message: input,\r\n        api_key: apiKey\r\n      });\r\n      \r\n      // Add small random delay to make it feel more natural (300-1200ms)\r\n      const replyDelay = 300 + Math.random() * 900;\r\n      \r\n      // Simulate \"typing\" delay based on response length\r\n      const typingDuration = Math.min(\r\n        1000 + (response.data.response.length / 10) * 100, \r\n        3000\r\n      );\r\n      \r\n      // Show typing indicator for a realistic duration\r\n      await new Promise(resolve => setTimeout(resolve, replyDuration = typingDuration));\r\n      \r\n      const botMessage = {\r\n        id: `bot-${Date.now()}`,\r\n        content: response.data.response,\r\n        sender: 'bot',\r\n        timestamp: new Date(),\r\n        read: isOpen // Only mark as read if chat is open\r\n      };\r\n      \r\n      setMessages(prev => [...prev, botMessage]);\r\n      \r\n      // If widget is closed when response arrives, show notification\r\n      if (!isOpen) {\r\n        showNotification(\"New message from AI Assistant\");\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      \r\n      const errorMessage = {\r\n        id: `error-${Date.now()}`,\r\n        content: `Sorry, there was an error: ${error.response?.data?.detail || error.message || 'Unknown error'}`,\r\n        sender: 'bot',\r\n        timestamp: new Date(),\r\n        read: isOpen,\r\n        isError: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleWidget = () => {\r\n    setIsOpen(!isOpen);\r\n    \r\n    // If opening the widget, mark all messages as read\r\n    if (!isOpen) {\r\n      setMessages(prevMessages => prevMessages.map(msg => \r\n        msg.sender === 'bot' && !msg.read ? {...msg, read: true} : msg\r\n      ));\r\n    }\r\n  };\r\n  \r\n  const showNotification = (message) => {\r\n    // Show browser notification if supported\r\n    if (\"Notification\" in window) {\r\n      if (Notification.permission === \"granted\") {\r\n        new Notification(message);\r\n      } else if (Notification.permission !== \"denied\") {\r\n        Notification.requestPermission().then(permission => {\r\n          if (permission === \"granted\") {\r\n            new Notification(message);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Count unread messages\r\n  const unreadCount = messages.filter(msg => msg.sender === 'bot' && !msg.read).length;\r\n\r\n  return (\r\n    <div className={`chat-widget ${isOpen ? 'open' : 'closed'}`}>\r\n      {isOpen ? (\r\n        <>\r\n          <div className=\"chat-widget-header\">\r\n            <h3>Chat with AI Assistant</h3>\r\n          </div>\r\n          <div className=\"chat-widget-messages\">\r\n            {messages.map((message) => (\r\n              <div \r\n                key={message.id} \r\n                className={`chat-widget-message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}\r\n              >\r\n                <div className={`chat-widget-message-content ${message.isError ? 'error-message' : ''}`}>\r\n                  {message.content}\r\n                  <span className=\"message-timestamp\">\r\n                    {formatTime(message.timestamp)}\r\n                  </span>\r\n                  {message.sender === 'user' && message.read && (\r\n                    <span className=\"read-receipt\">✓</span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n            \r\n            {isTyping && (\r\n              <div className=\"user-typing-indicator\">\r\n                <span>You are typing...</span>\r\n              </div>\r\n            )}\r\n            \r\n            {isLoading && (\r\n              <div className=\"chat-widget-message bot-message\">\r\n                <div className=\"typing-indicator\">\r\n                  <span></span>\r\n                  <span></span>\r\n                  <span></span>\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n          <form className=\"chat-widget-input\" onSubmit={handleSubmit}>\r\n            <input\r\n              ref={inputRef}\r\n              type=\"text\"\r\n              value={input}\r\n              onChange={handleInputChange}\r\n              placeholder=\"Type your message...\"\r\n              disabled={isLoading}\r\n            />\r\n            <button type=\"submit\" disabled={isLoading || !input.trim()}>\r\n              <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M22 2L11 13\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n                <path d=\"M22 2L15 22L11 13L2 9L22 2Z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n              </svg>\r\n            </button>\r\n          </form>\r\n        </>\r\n      ) : (\r\n        <div className=\"chat-widget-button\">\r\n          <span>Chat</span>\r\n          {unreadCount > 0 && (\r\n            <div className=\"unread-badge\">{unreadCount}</div>\r\n          )}\r\n        </div>\r\n      )}\r\n      <button className=\"chat-widget-toggle\" onClick={toggleWidget}>\r\n        {isOpen ? (\r\n          <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M18 6L6 18\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n            <path d=\"M6 6L18 18\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n          </svg>\r\n        ) : (\r\n          <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M20 11H4C3.45 11 3 11.45 3 12C3 12.55 3.45 13 4 13H20C20.55 13 21 12.55 21 12C21 11.45 20.55 11 20 11Z\" fill=\"currentColor\"/>\r\n          </svg>\r\n        )}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Helper function to format time for messages\r\nconst formatTime = (date) => {\r\n  if (!date) return '';\r\n  const hours = date.getHours();\r\n  const minutes = date.getMinutes();\r\n  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\r\n};\r\n\r\nexport default ChatWidget; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}