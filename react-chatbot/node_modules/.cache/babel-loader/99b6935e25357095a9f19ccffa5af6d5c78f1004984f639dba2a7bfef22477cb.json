{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Custom hook for managing chat state\nconst useChatState = apiKey => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: 'welcome-msg',\n    content: \"How can I help you today?\",\n    sender: 'bot',\n    timestamp: new Date(),\n    read: true\n  }]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [lastTypingTime, setLastTypingTime] = useState(null);\n  const [consecutiveUserMessages, setConsecutiveUserMessages] = useState(0);\n  const [messageHistory, setMessageHistory] = useState([]);\n\n  // Monitor consecutive user messages for conversation flow control\n  useEffect(() => {\n    if (messages.length > 1) {\n      const lastMessage = messages[messages.length - 1];\n      const secondLastMessage = messages[messages.length - 2];\n      if (lastMessage.sender === 'user' && secondLastMessage.sender === 'user') {\n        setConsecutiveUserMessages(prev => prev + 1);\n      } else if (lastMessage.sender === 'bot') {\n        setConsecutiveUserMessages(0);\n      }\n    }\n  }, [messages]);\n\n  // Update message history for context-aware replies\n  useEffect(() => {\n    // Only store the last 10 messages for context\n    const recentMessages = messages.slice(-10).map(msg => ({\n      role: msg.sender === 'user' ? 'user' : 'assistant',\n      content: msg.content\n    }));\n    setMessageHistory(recentMessages);\n  }, [messages]);\n\n  // Handle user typing detection\n  const handleTyping = () => {\n    const currentTime = new Date().getTime();\n    if (!isTyping || lastTypingTime && currentTime - lastTypingTime > 500) {\n      setIsTyping(true);\n      setLastTypingTime(currentTime);\n    }\n  };\n\n  // Send message to the API\n  const sendMessage = async content => {\n    if (!content.trim()) return;\n    const messageId = `user-${Date.now()}`;\n    const currentTime = new Date();\n    const userMessage = {\n      id: messageId,\n      content,\n      sender: 'user',\n      timestamp: currentTime,\n      read: true\n    };\n\n    // Add user message to chat\n    setMessages(prev => [...prev, userMessage]);\n    setIsTyping(false);\n    setIsLoading(true);\n    try {\n      // Check if we should suggest a specific response based on context\n      let suggestedResponse = null;\n\n      // Check for consecutive user messages - suggest user might want to wait for a response\n      if (consecutiveUserMessages >= 2) {\n        suggestedResponse = {\n          id: `suggestion-${Date.now()}`,\n          content: \"I notice you're sending multiple messages quickly. I'm still processing your previous questions. Please give me a moment to respond.\",\n          sender: 'bot',\n          timestamp: new Date(),\n          read: true,\n          isSuggestion: true\n        };\n        setMessages(prev => [...prev, suggestedResponse]);\n      }\n\n      // If we showed a suggestion, wait a bit\n      if (suggestedResponse) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n\n      // Send message to backend\n      const response = await axios.post('/chat', {\n        message: content,\n        api_key: apiKey,\n        context: messageHistory // Send recent message history for context\n      });\n\n      // Simulate typing delay based on response length\n      const typingDuration = Math.min(1000 + response.data.response.length / 10 * 100, 3000);\n      await new Promise(resolve => setTimeout(resolve, typingDuration));\n      const botMessage = {\n        id: `bot-${Date.now()}`,\n        content: response.data.response,\n        sender: 'bot',\n        timestamp: new Date(),\n        read: true\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error sending message:', error);\n      const errorMessage = {\n        id: `error-${Date.now()}`,\n        content: `Sorry, there was an error: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message || 'Unknown error'}`,\n        sender: 'bot',\n        timestamp: new Date(),\n        read: true,\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Mark messages as read\n  const markMessagesAsRead = () => {\n    setMessages(prevMessages => prevMessages.map(msg => msg.sender === 'bot' && !msg.read ? {\n      ...msg,\n      read: true\n    } : msg));\n  };\n  return {\n    messages,\n    isLoading,\n    isTyping,\n    handleTyping,\n    sendMessage,\n    markMessagesAsRead,\n    setMessages\n  };\n};\n_s(useChatState, \"jHDvw14X2a/U4SCSLkfJuZClYR4=\");\nexport default useChatState;","map":{"version":3,"names":["useState","useEffect","axios","useChatState","apiKey","_s","messages","setMessages","id","content","sender","timestamp","Date","read","isLoading","setIsLoading","isTyping","setIsTyping","lastTypingTime","setLastTypingTime","consecutiveUserMessages","setConsecutiveUserMessages","messageHistory","setMessageHistory","length","lastMessage","secondLastMessage","prev","recentMessages","slice","map","msg","role","handleTyping","currentTime","getTime","sendMessage","trim","messageId","now","userMessage","suggestedResponse","isSuggestion","Promise","resolve","setTimeout","response","post","message","api_key","context","typingDuration","Math","min","data","botMessage","error","_error$response","_error$response$data","console","errorMessage","detail","isError","markMessagesAsRead","prevMessages"],"sources":["C:/Users/Zexa/Downloads/Rag_Chatbot-main/Rag_Chatbot-main/rag/react-chatbot/src/hooks/useChatState.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Custom hook for managing chat state\r\nconst useChatState = (apiKey) => {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      id: 'welcome-msg',\r\n      content: \"How can I help you today?\",\r\n      sender: 'bot',\r\n      timestamp: new Date(),\r\n      read: true\r\n    }\r\n  ]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [lastTypingTime, setLastTypingTime] = useState(null);\r\n  const [consecutiveUserMessages, setConsecutiveUserMessages] = useState(0);\r\n  const [messageHistory, setMessageHistory] = useState([]);\r\n\r\n  // Monitor consecutive user messages for conversation flow control\r\n  useEffect(() => {\r\n    if (messages.length > 1) {\r\n      const lastMessage = messages[messages.length - 1];\r\n      const secondLastMessage = messages[messages.length - 2];\r\n\r\n      if (lastMessage.sender === 'user' && secondLastMessage.sender === 'user') {\r\n        setConsecutiveUserMessages(prev => prev + 1);\r\n      } else if (lastMessage.sender === 'bot') {\r\n        setConsecutiveUserMessages(0);\r\n      }\r\n    }\r\n  }, [messages]);\r\n\r\n  // Update message history for context-aware replies\r\n  useEffect(() => {\r\n    // Only store the last 10 messages for context\r\n    const recentMessages = messages.slice(-10).map(msg => ({\r\n      role: msg.sender === 'user' ? 'user' : 'assistant',\r\n      content: msg.content\r\n    }));\r\n    \r\n    setMessageHistory(recentMessages);\r\n  }, [messages]);\r\n\r\n  // Handle user typing detection\r\n  const handleTyping = () => {\r\n    const currentTime = new Date().getTime();\r\n    \r\n    if (!isTyping || (lastTypingTime && currentTime - lastTypingTime > 500)) {\r\n      setIsTyping(true);\r\n      setLastTypingTime(currentTime);\r\n    }\r\n  };\r\n\r\n  // Send message to the API\r\n  const sendMessage = async (content) => {\r\n    if (!content.trim()) return;\r\n    \r\n    const messageId = `user-${Date.now()}`;\r\n    const currentTime = new Date();\r\n    \r\n    const userMessage = {\r\n      id: messageId,\r\n      content,\r\n      sender: 'user',\r\n      timestamp: currentTime,\r\n      read: true\r\n    };\r\n    \r\n    // Add user message to chat\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsTyping(false);\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Check if we should suggest a specific response based on context\r\n      let suggestedResponse = null;\r\n      \r\n      // Check for consecutive user messages - suggest user might want to wait for a response\r\n      if (consecutiveUserMessages >= 2) {\r\n        suggestedResponse = {\r\n          id: `suggestion-${Date.now()}`,\r\n          content: \"I notice you're sending multiple messages quickly. I'm still processing your previous questions. Please give me a moment to respond.\",\r\n          sender: 'bot',\r\n          timestamp: new Date(),\r\n          read: true,\r\n          isSuggestion: true\r\n        };\r\n        \r\n        setMessages(prev => [...prev, suggestedResponse]);\r\n      }\r\n      \r\n      // If we showed a suggestion, wait a bit\r\n      if (suggestedResponse) {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      }\r\n\r\n      // Send message to backend\r\n      const response = await axios.post('/chat', {\r\n        message: content,\r\n        api_key: apiKey,\r\n        context: messageHistory // Send recent message history for context\r\n      });\r\n      \r\n      // Simulate typing delay based on response length\r\n      const typingDuration = Math.min(\r\n        1000 + (response.data.response.length / 10) * 100, \r\n        3000\r\n      );\r\n      \r\n      await new Promise(resolve => setTimeout(resolve, typingDuration));\r\n      \r\n      const botMessage = {\r\n        id: `bot-${Date.now()}`,\r\n        content: response.data.response,\r\n        sender: 'bot',\r\n        timestamp: new Date(),\r\n        read: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, botMessage]);\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      \r\n      const errorMessage = {\r\n        id: `error-${Date.now()}`,\r\n        content: `Sorry, there was an error: ${error.response?.data?.detail || error.message || 'Unknown error'}`,\r\n        sender: 'bot',\r\n        timestamp: new Date(),\r\n        read: true,\r\n        isError: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Mark messages as read\r\n  const markMessagesAsRead = () => {\r\n    setMessages(prevMessages => \r\n      prevMessages.map(msg => msg.sender === 'bot' && !msg.read ? {...msg, read: true} : msg)\r\n    );\r\n  };\r\n\r\n  return {\r\n    messages,\r\n    isLoading,\r\n    isTyping,\r\n    handleTyping,\r\n    sendMessage,\r\n    markMessagesAsRead,\r\n    setMessages\r\n  };\r\n};\r\n\r\nexport default useChatState; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}